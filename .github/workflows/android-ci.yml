name: Android CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run unit tests
      run: ./gradlew test
      
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Unit Test Results
        path: '**/build/test-results/testDebugUnitTest/TEST-*.xml'
        reporter: java-junit
        
    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: |
          **/build/reports/tests/
          **/build/test-results/

  ui-test:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Detect runner architecture
      id: runner-arch
      run: |
        ARCH=$(uname -m)
        echo "Host architecture: $ARCH"
        if [ "$ARCH" = "arm64" ]; then
          echo "emulator_arch=arm64-v8a" >> $GITHUB_OUTPUT
          echo "cache_key=avd-30-arm64" >> $GITHUB_OUTPUT
          echo "emulator_options=-no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none -memory 2048 -partition-size 2048 -no-snapshot -wipe-data" >> $GITHUB_OUTPUT
        else
          echo "emulator_arch=x86_64" >> $GITHUB_OUTPUT
          echo "cache_key=avd-30-x86_64" >> $GITHUB_OUTPUT
          echo "emulator_options=-no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none -memory 2048 -partition-size 2048 -no-snapshot -wipe-data -accel off" >> $GITHUB_OUTPUT
        fi
        
    - name: AVD cache
      uses: actions/cache@v4
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: ${{ steps.runner-arch.outputs.cache_key }}
        
    - name: Create AVD and generate snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 30
        target: google_apis
        arch: ${{ steps.runner-arch.outputs.emulator_arch }}
        profile: Nexus 6
        force-avd-creation: false
        emulator-options: ${{ steps.runner-arch.outputs.emulator_options }}
        disable-animations: false
        emulator-boot-timeout: 900
        script: echo "Generated AVD snapshot for caching."
        
    - name: Run instrumented tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 30
        target: google_apis
        arch: ${{ steps.runner-arch.outputs.emulator_arch }}
        profile: Nexus 6
        force-avd-creation: false
        emulator-options: ${{ steps.runner-arch.outputs.emulator_options }}
        disable-animations: true
        emulator-boot-timeout: 900
        script: |
          echo "Debugging emulator and ADB status..."
          adb devices -l
          echo "Waiting for emulator to be ready..."
          adb wait-for-device
          echo "Emulator is ready, checking boot status..."
          adb shell getprop sys.boot_completed
          adb shell input keyevent 82
          echo "Running instrumented tests..."
          ./gradlew connectedAndroidTest
        
    - name: Upload UI test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ui-test-results
        path: |
          **/build/reports/androidTests/
          **/build/outputs/androidTest-results/

  screenshot-test:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Detect runner architecture for screenshot tests
      id: runner-arch-screenshot
      run: |
        ARCH=$(uname -m)
        echo "Host architecture: $ARCH"
        if [ "$ARCH" = "arm64" ]; then
          echo "emulator_arch=arm64-v8a" >> $GITHUB_OUTPUT
          echo "cache_key=avd-30-arm64-screenshot" >> $GITHUB_OUTPUT
          echo "emulator_options=-no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none -memory 2048 -partition-size 2048 -no-snapshot -wipe-data" >> $GITHUB_OUTPUT
        else
          echo "emulator_arch=x86_64" >> $GITHUB_OUTPUT
          echo "cache_key=avd-30-x86_64-screenshot" >> $GITHUB_OUTPUT
          echo "emulator_options=-no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none -memory 2048 -partition-size 2048 -no-snapshot -wipe-data -accel off" >> $GITHUB_OUTPUT
        fi
      
    - name: AVD cache for screenshot tests
      uses: actions/cache@v4
      id: avd-cache-screenshot
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: ${{ steps.runner-arch-screenshot.outputs.cache_key }}
        
    - name: Create AVD and generate snapshot for screenshot testing
      if: steps.avd-cache-screenshot.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 30
        target: google_apis
        arch: ${{ steps.runner-arch-screenshot.outputs.emulator_arch }}
        profile: Nexus 6
        force-avd-creation: false
        emulator-options: ${{ steps.runner-arch-screenshot.outputs.emulator_options }}
        disable-animations: false
        emulator-boot-timeout: 900
        script: echo "Generated AVD snapshot for screenshot testing."
        
    - name: Run screenshot tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 30
        target: google_apis
        arch: ${{ steps.runner-arch-screenshot.outputs.emulator_arch }}
        profile: Nexus 6
        force-avd-creation: false
        emulator-options: ${{ steps.runner-arch-screenshot.outputs.emulator_options }}
        disable-animations: true
        emulator-boot-timeout: 900
        script: |
          echo "Debugging emulator and ADB status..."
          adb devices -l
          echo "Waiting for emulator to be ready..."
          adb wait-for-device
          echo "Emulator is ready, checking boot status..."
          adb shell getprop sys.boot_completed
          adb shell input keyevent 82
          echo "Running screenshot tests..."
          ./gradlew executeScreenshotTests
        
    - name: Upload screenshot test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: screenshot-test-results
        path: |
          **/screenshots/
          **/build/reports/shot/

  build:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build debug APK
      run: ./gradlew assembleDebug
      
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk